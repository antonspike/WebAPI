// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250411143206_CreateDb")]
    partial class CreateDb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("schema_1")
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "schema_1", "order_status", new[] { "pending", "cancelled", "completed" });
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Core.Models.Client", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<DateOnly>("birth_date")
                        .HasColumnType("date");

                    b.Property<string>("lastname")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar");

                    b.HasKey("id");

                    b.ToTable("client", "schema_1");
                });

            modelBuilder.Entity("Core.Models.FunctionsReturnModels.AvgCostsByHour", b =>
                {
                    b.Property<decimal>("avg_cost")
                        .HasColumnType("numeric");

                    b.Property<decimal>("hour")
                        .HasColumnType("numeric");

                    b.ToTable((string)null);

                    b.ToFunction("get_avg_costs_by_hour");
                });

            modelBuilder.Entity("Core.Models.FunctionsReturnModels.BdaySums", b =>
                {
                    b.Property<string>("client_lastname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("client_name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("sum")
                        .HasColumnType("numeric");

                    b.ToTable((string)null);

                    b.ToFunction("get_total_cost_of_birthday_orders");
                });

            modelBuilder.Entity("Core.Models.Order", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int>("client_id")
                        .HasColumnType("integer");

                    b.Property<decimal>("cost")
                        .HasColumnType("numeric");

                    b.Property<DateOnly>("date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("CURRENT_DATE");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("order_status");

                    b.Property<TimeOnly>("time")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("time")
                        .HasDefaultValueSql("CURRENT_TIME");

                    b.HasKey("id");

                    b.HasIndex("client_id");

                    b.ToTable("order", "schema_1");
                });

            modelBuilder.Entity("Core.Models.Order", b =>
                {
                    b.HasOne("Core.Models.Client", "client")
                        .WithMany()
                        .HasForeignKey("client_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("order_client_id_fk");

                    b.Navigation("client");
                });
#pragma warning restore 612, 618
        }
    }
}
